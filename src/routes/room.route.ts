import express from "express";

import { roomControllers } from "../controllers/room.controller";
import { authControllers } from "../controllers/auth.controller";
import { allPermissions } from "../types/Permissions.type";
import { handleFilesMiddleware } from "../middlewares/handleFiles.middleware";
import multer from "multer";

export const roomRouter = express.Router();
const upload = multer({ dest: "../upload" });

/**
 * @swagger
 * /api/v1/rooms:
 *   post:
 *     summary: Create a new room
 *     description: |
 *       **IMPORTANT:** This endpoint requires the data to be submitted as **multipart/form-data**.
 *       The frontend must send all fields as form-data and include one image file using the `img` key.
 *
 *       ⚠️ Do NOT send the `imageUrl` field — it will be automatically generated by the backend.
 *
 *       This allows the backend to process the image and store the file path securely.
 *     tags: [Rooms]
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             required:
 *               - number
 *               - floorNumber
 *               - status
 *               - state
 *               - basePriceInCFA
 *               - viewType
 *               - isSmokingAllowed
 *               - isActive
 *               - description
 *               - sizeInSquareMeters
 *               - accessType
 *               - building
 *               - type
 *               - img
 *             properties:
 *               number:
 *                 type: string
 *                 example: "101"
 *               floorNumber:
 *                 type: integer
 *                 example: 1
 *               status:
 *                 type: string
 *                 enum: [free, occupied, reserved, maintenance]
 *                 example: free
 *               state:
 *                 type: string
 *                 enum: [clean, dirty, needs-inspection]
 *                 example: clean
 *               basePriceInCFA:
 *                 type: number
 *                 example: 2000
 *               viewType:
 *                 type: string
 *                 example: Ocean view
 *               isSmokingAllowed:
 *                 type: boolean
 *                 example: false
 *               isActive:
 *                 type: boolean
 *                 example: true
 *               description:
 *                 type: string
 *                 example: A clean and comfortable room with an ocean view.
 *               sizeInSquareMeters:
 *                 type: number
 *                 example: 30
 *               accessType:
 *                 type: string
 *                 example: key-card
 *               building:
 *                 type: string
 *                 example: 64f4a9b7e6b0f8f9d8a9b7e6
 *               type:
 *                 type: string
 *                 description: Room type ObjectId
 *                 example: 64f4a9b7e6b0f8f9d8a9b7e7
 *               assignedTo:
 *                 type: string
 *                 example: 64f4a9b7e6b0f8f9d8a9b7e8
 *               img:
 *                 type: string
 *                 format: binary
 *                 description: Single image file for the room
 *     responses:
 *       200:
 *         description: Room created successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 ok:
 *                   type: boolean
 *                   example: true
 *                 status:
 *                   type: string
 *                   example: success
 *                 data:
 *                   $ref: '#/components/schemas/Room'
 *
 *   get:
 *     summary: Get list of all rooms
 *     tags: [Rooms]
 *     responses:
 *       200:
 *         description: List of rooms retrieved successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 ok:
 *                   type: boolean
 *                   example: true
 *                 status:
 *                   type: string
 *                   example: success
 *                 data:
 *                   type: array
 *                   items:
 *                     $ref: '#/components/schemas/Room'
 *
 * /api/v1/rooms/{id}:
 *   get:
 *     summary: Get a single room by ID
 *     tags: [Rooms]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID of the room to retrieve
 *     responses:
 *       200:
 *         description: Room retrieved successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 ok:
 *                   type: boolean
 *                   example: true
 *                 status:
 *                   type: string
 *                   example: success
 *                 data:
 *                   $ref: '#/components/schemas/Room'
 *       404:
 *         description: Room not found
 *
 *   patch:
 *     summary: Update a room by ID
 *     tags: [Rooms]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID of the room to update
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               number:
 *                 type: string
 *               description:
 *                 type: string
 *               basePriceInCFA:
 *                 type: number
 *               isActive:
 *                 type: boolean
 *     responses:
 *       200:
 *         description: Room updated successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 ok:
 *                   type: boolean
 *                   example: true
 *                 status:
 *                   type: string
 *                   example: success
 *                 data:
 *                   $ref: '#/components/schemas/Room'
 *       404:
 *         description: Room not found
 *
 *   delete:
 *     summary: Delete a room by ID
 *     tags: [Rooms]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID of the room to delete
 *     responses:
 *       200:
 *         description: Room deleted successfully
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 status:
 *                   type: string
 *                   example: ok
 *                 message:
 *                   type: string
 *                   example: resource successfully deleted
 *       404:
 *         description: Room not found
 *
 * components:
 *   schemas:
 *     Room:
 *       type: object
 *       properties:
 *         lock:
 *           type: object
 *           nullable: true
 *           properties:
 *             until:
 *               type: string
 *               format: date-time
 *               nullable: true
 *               example: null
 *         _id:
 *           type: string
 *           example: "6847fd406656e912d7a76b91"
 *         id:
 *           type: string
 *           example: "6847fd406656e912d7a76b91"
 *         number:
 *           type: string
 *           example: "A101"
 *         floorNumber:
 *           type: integer
 *           example: 1
 *         status:
 *           type: string
 *           enum: [free, occupied, reserved, maintenance]
 *           example: "free"
 *         state:
 *           type: string
 *           enum: [clean, dirty, needs-inspection]
 *           example: "clean"
 *         viewType:
 *           type: string
 *           example: "Garden view"
 *         isSmokingAllowed:
 *           type: boolean
 *           example: false
 *         isActive:
 *           type: boolean
 *           example: true
 *         description:
 *           type: string
 *           example: "Spacious room with modern amenities and a beautiful garden view."
 *         accessType:
 *           type: string
 *           example: "key-card"
 *         building:
 *           type: string
 *           example: "6847f9336cd45e05b47768cd"
 *         type:
 *           type: string
 *           example: "6847fb6971971ba932d254c3"
 *         imageUrl:
 *           type: string
 *           format: uri
 *           example: "https://st60307.ispot.cc/btsinternship/http://localhost:8000/uploads/82d9a6d2-7c46-41b3-a178-5f9253b7d94d-alter-girls-thumbnail.jpg"
 *         createdAt:
 *           type: string
 *           format: date-time
 *           example: "2025-06-10T09:39:12.732Z"
 *         updatedAt:
 *           type: string
 *           format: date-time
 *           example: "2025-06-15T13:49:11.400Z"
 *         __v:
 *           type: integer
 *           example: 0
 *         size:
 *           type: string
 *           example: "30 sqmtrs"
 */

roomRouter
  .route("/")
  .post(
    authControllers.protect,
    authControllers.restrictTo(allPermissions.rooms.create),
    upload.array("img", 1),
    handleFilesMiddleware,
    roomControllers.createRoom
  )
  .get(
    authControllers.protect,
    authControllers.restrictTo(allPermissions.rooms.readAll),
    roomControllers.readAllRooms
  );

roomRouter
  .route("/:id")
  .get(
    authControllers.protect,
    authControllers.restrictTo(allPermissions.rooms.readOne),
    roomControllers.readOneRoom
  )
  .patch(
    authControllers.protect,
    authControllers.restrictTo(allPermissions.rooms.update),
    roomControllers.updateRoom
  )
  .delete(
    authControllers.protect,
    authControllers.restrictTo(allPermissions.rooms.delete),
    roomControllers.deleteRoom
  );
